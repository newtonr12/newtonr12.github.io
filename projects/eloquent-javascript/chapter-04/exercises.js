////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, step) {
 let rangeArray = [];
 if(step === undefined) {
   step = 1;
   //console.log(step);
 }
 if (num1 === num2) {
   return rangeArray;
   console.log(rangeArray);
 }
 if(num1 < num2 && step > 0) {
     for(let index = num1; index <= num2; index += step) {
         rangeArray.push(index);
     }
 }
 if(num1 > num2 && step > 0) {
     for(let index = num1; index >= num2; index -= step) {
         rangeArray(index)
     }
 }
 if(step < 0) {
     return [];
 }
 
 return rangeArray;
}


////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
 if(!array.length) {
     return 0;
 }
 let number = 0;
 for(let index = 0; index < array.length; index++) {
     number += array[index];
 } 
 return number;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
 const result = [];
 for(let index = array.length -1; index >= 0; index--) {
     result.push(array[index]);
 }
 return result;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
 for(let index = 0; index < Math.floor(array.length / 2); index++) {
  let num = array[index];
  array[index] = array[array.length - 1 - index];
  array[array.length - 1 - index] = num;
 }
 return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function arrayToList(array) {
 let list = {};
 for(let index = array.length - 1; index >= 0; index--) {
  if (index === array.length - 1) {
   list.value = array[index];
   list.rest = null;
  } else {
   list = {value: array[index], rest: list}
  }
 }
 return list;
}


////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
let array = [];
for (let node = list; node; node = node.rest) {
 array.push(node.value);
}
 return array;
}


////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
 return {value: element, rest: list};

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, index) {
 if (index < 0) return;
 let counter = 0;
 for(let j = list; j; j = j.rest) {
  if (counter === index) {
   return j.value;
  }
  counter++;
 }

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
 if(x === y) {
  return true;
 }
 else if(typeof x == 'object' && x != null && typeof y == 'object' && y != null) {
  if (Object.keys(x).length != Object.keys(y).length)
  return false;
  for(var prop in x) {
   if(y.hasOwnProperty(prop)) {
    if(! deepEqual(x[prop], y[prop]))
    return false;
   }
   else
   return false;
  }
  return true;
 }
 else
 return false;

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
